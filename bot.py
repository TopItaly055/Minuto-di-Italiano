import os
import json
import logging
import asyncio
from telegram import (
    Bot,
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
#           –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)

TOKEN = os.getenv("BOT_TOKEN")
STATE_LEVEL, STATE_TOPIC, STATE_QUIZ = range(3)
LEVELS = ["A1", "A2", "B1", "B2"]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç—Ä–µ–Ω–∞–∂—ë—Ä –ø–æ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–º—É.\n"
        "–ù–∞–ø–∏—à–∏ /quiz, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏ –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å."
    )

async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [[InlineKeyboardButton(lvl, callback_data=f"level|{lvl}")] for lvl in LEVELS]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:", reply_markup=InlineKeyboardMarkup(kb))
    return STATE_LEVEL

async def on_level_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    level = query.data.split("|",1)[1]
    context.user_data["level"] = level

    folder = os.path.join("content", level)
    if not os.path.isdir(folder):
        await query.edit_message_text(f"‚ùå –ù–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è —É—Ä–æ–≤–Ω—è {level}.")
        return STATE_LEVEL

    files = sorted(f for f in os.listdir(folder) if f.endswith(".json"))
    kb = []
    for fn in files:
        try:
            data = json.load(open(os.path.join(folder, fn), encoding="utf-8"))
            name = data.get("topic_name", fn[:-5])
        except Exception:
            continue
        kb.append([InlineKeyboardButton(name, callback_data=f"topic|{fn}")])

    if not kb:
        await query.edit_message_text(f"‚ùå –î–ª—è —É—Ä–æ–≤–Ω—è {level} –Ω–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ç–µ–º.")
        return STATE_LEVEL

    await query.edit_message_text(
        f"üìÇ –£—Ä–æ–≤–µ–Ω—å *{level}* –≤—ã–±—Ä–∞–Ω.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(kb),
    )
    return STATE_TOPIC

async def on_topic_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    topic_file = query.data.split("|",1)[1]
    level = context.user_data["level"]
    path = os.path.join("content", level, topic_file)

    try:
        data = json.load(open(path, encoding="utf-8"))
        exercises = data.get("exercises", [])
        topic_name = data.get("topic_name", topic_file[:-5])
    except Exception:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.")
        return STATE_TOPIC

    if not exercises:
        await query.edit_message_text("‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø—É—Å—Ç—ã.")
        return STATE_TOPIC

    context.user_data.update({
        "topic_name": topic_name,
        "exercises": exercises,
        "index": 0,
    })
    await query.edit_message_text(
        f"üöÄ –¢–µ–º–∞ *{topic_name}* –≤—ã–±—Ä–∞–Ω–∞!",
        parse_mode="Markdown",
    )
    return await send_question(update, context)

async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    idx = context.user_data["index"]
    exercises = context.user_data["exercises"]
    if idx >= len(exercises):
        return await _reply(update, "üéâ –í—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω—ã! –ù–∞–ø–∏—à–∏ /quiz —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

    ex = exercises[idx]
    kb = ReplyKeyboardMarkup([[opt] for opt in ex.get("options",[])],
                             resize_keyboard=True, one_time_keyboard=True)
    return await _reply(update,
        f"‚ùì –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {idx+1}:\n{ex.get('question','')}",
        reply_markup=kb
    )

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    idx = context.user_data["index"]
    ex = context.user_data["exercises"][idx]
    user = update.message.text.strip()
    correct = ex.get("answer","")

    if user.lower() == correct.lower():
        await update.message.reply_text(f"‚úÖ –í–µ—Ä–Ω–æ!\n{ex.get('explanation','')}")
    else:
        await update.message.reply_text(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}\n{ex.get('explanation','')}"
        )

    context.user_data["index"] += 1
    return await send_question(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–ø–∏—à–∏ /quiz —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

async def _reply(update: Update, text: str, **kw):
    if update.callback_query:
        await update.callback_query.message.reply_text(text, **kw)
    else:
        await update.message.reply_text(text, **kw)


async def main():
    if not TOKEN:
        logging.error("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω.")
        return

    # 1) —É–¥–∞–ª—è–µ–º webhook –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ await
    bot = Bot(token=TOKEN)
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("üîÑ Webhook —É–¥–∞–ª—ë–Ω, –æ—á–µ—Ä–µ–¥—å —Å–±—Ä–æ—à–µ–Ω–∞.")

    # 2) —Å–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º
    app = ApplicationBuilder().token(TOKEN).build()
    conv = ConversationHandler(
        entry_points=[CommandHandler("quiz", quiz)],
        states={
            STATE_LEVEL: [CallbackQueryHandler(on_level_select, pattern=r"^level\|")],
            STATE_TOPIC: [CallbackQueryHandler(on_topic_select, pattern=r"^topic\|")],
            STATE_QUIZ:  [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )
    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv)

    logging.info("‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º polling‚Ä¶")
    # 3) –∑–∞–ø—É—Å–∫–∞–µ–º polling
    await app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
