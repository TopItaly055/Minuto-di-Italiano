import os
import json
import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
#           –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)

# Token –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
STATE_LEVEL, STATE_TOPIC, STATE_QUIZ = range(3)

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —É—Ä–æ–≤–Ω–∏
LEVELS = ["A1", "A2", "B1", "B2"]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è."""
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç—Ä–µ–Ω–∞–∂—ë—Ä –ø–æ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–º—É.\n"
        "–ù–∞–ø–∏—à–∏ /quiz, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏ –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å."
    )

async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è."""
    keyboard = [
        [InlineKeyboardButton(level, callback_data=f"level|{level}")]
        for level in LEVELS
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )
    return STATE_LEVEL

async def on_level_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è; –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–º—ã —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è."""
    query = update.callback_query
    await query.answer()
    _, level = query.data.split("|", 1)
    context.user_data["level"] = level
    folder = os.path.join("content", level)
    if not os.path.exists(folder):
        await query.edit_message_text(f"‚ùå –î–ª—è —É—Ä–æ–≤–Ω—è {level} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.")
        return ConversationHandler.END

    files = sorted(f for f in os.listdir(folder) if f.endswith(".json"))
    if not files:
        await query.edit_message_text(f"‚ùå –î–ª—è —É—Ä–æ–≤–Ω—è {level} –Ω–µ—Ç —Ç–µ–º.")
        return ConversationHandler.END

    keyboard = []
    for fname in files:
        key = fname[:-5]  # —É–±—Ä–∞—Ç—å .json
        try:
            with open(os.path.join(folder, fname), encoding="utf-8") as f:
                data = json.load(f)
            name = data.get("topic_name", key)
            keyboard.append([InlineKeyboardButton(name, callback_data=f"topic|{key}")])
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {fname}: {e}")
            continue

    if not keyboard:
        await query.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–º—ã –¥–ª—è —É—Ä–æ–≤–Ω—è {level}.")
        return ConversationHandler.END

    await query.edit_message_text(
        f"–£—Ä–æ–≤–µ–Ω—å *{level}* –≤—ã–±—Ä–∞–Ω.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )
    return STATE_TOPIC

async def on_topic_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã; –∑–∞–≥—Ä—É–∂–∞–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ –∑–∞–¥–∞—ë—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å."""
    query = update.callback_query
    await query.answer()
    topic_key = query.data.split("|", 1)[1]
    level = context.user_data["level"]
    path = os.path.join("content", level, f"{level}_{topic_key}.json")
    if not os.path.exists(path):
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã.")
        return ConversationHandler.END

    try:
        with open(path, encoding="utf-8") as f:
            data = json.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {path}: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.")
        return ConversationHandler.END

    exercises = data.get("exercises", [])
    if not exercises:
        await query.edit_message_text("‚ùå –í —ç—Ç–æ–π —Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.")
        return ConversationHandler.END

    context.user_data["exercises"] = exercises
    context.user_data["topic_name"] = data.get("topic_name", topic_key)
    context.user_data["index"] = 0
    await query.edit_message_text(
        f"–¢–µ–º–∞ *{context.user_data['topic_name']}* –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!",
        parse_mode="Markdown"
    )
    return await send_question(update, context, from_callback=True)

async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE, from_callback=False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—á–µ—Ä–µ–¥–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ."""
    idx = context.user_data.get("index", 0)
    ex_list = context.user_data.get("exercises", [])
    if idx >= len(ex_list):
        await _reply(update, context, "üéâ –í—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω—ã! –ù–∞–ø–∏—à–∏ /quiz, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å.")
        return ConversationHandler.END

    ex = ex_list[idx]
    kb = ReplyKeyboardMarkup([[opt] for opt in ex.get("options", [])], resize_keyboard=True, one_time_keyboard=True)
    await _reply(update, context, f"üî¢ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {idx+1}:\n{ex.get('question', '–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–∞')}", reply_markup=kb)
    return STATE_QUIZ

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É."""
    idx = context.user_data.get("index", 0)
    ex_list = context.user_data.get("exercises", [])
    if idx >= len(ex_list):
        await update.message.reply_text("–í—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –ù–∞–ø–∏—à–∏ /quiz, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.")
        return ConversationHandler.END
    ex = ex_list[idx]
    user_ans = update.message.text.strip()
    right_ans = ex.get("answer", "")
    if user_ans.lower() == right_ans.lower():
        await update.message.reply_text(f"‚úÖ –í–µ—Ä–Ω–æ!\n{ex.get('explanation', '')}")
    else:
        await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω–æ: {right_ans}\n{ex.get('explanation', '')}")
    context.user_data["index"] = idx + 1
    return await send_question(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–µ—Ä—ã–≤–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É."""
    await update.message.reply_text("‚ùå –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–ø–∏—à–∏ /quiz, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

# –£—Ç–∏–ª–∏—Ç–∞: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
async def _reply(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, **kwargs):
    if hasattr(update, "callback_query") and update.callback_query:
        await update.callback_query.message.reply_text(text, **kwargs)
    elif hasattr(update, "message") and update.message:
        await update.message.reply_text(text, **kwargs)

def main():
    import telegram
    logging.info(f"PTB version: {telegram.__version__}")

    if not TOKEN:
        logging.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.")
        return

    app = ApplicationBuilder().token(TOKEN).build()

    # ConversationHandler –¥–ª—è /quiz ‚Üí –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è ‚Üí –≤—ã–±–æ—Ä —Ç–µ–º—ã ‚Üí –æ—Ç–≤–µ—Ç—ã
    conv = ConversationHandler(
        entry_points=[CommandHandler("quiz", quiz)],
        states={
            STATE_LEVEL: [CallbackQueryHandler(on_level_select, pattern=r"^level\|")],
            STATE_TOPIC: [CallbackQueryHandler(on_topic_select, pattern=r"^topic\|")],
            STATE_QUIZ: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv)

    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥.")
    import asyncio

async def async_main():
    app = ApplicationBuilder().token(TOKEN).build()
    
    await app.bot.delete_webhook(drop_pending_updates=True)
    app.run_polling()

if __name__ == "__main__":
    asyncio.run(async_main())
